1) 
long funcQ(long x, long y){
	return (3 * y) + x;
}

long funcP(long r, long s, long t){
	if(s <= 0) goto foo;
	goto bar; 
foo:
	return t + funcQ(s, r);
bar:
	return r + funcQ(t, s);
}

2)
A. Which registers hold program values x, n, result, and mask?
	i) rdi -> x
	ii) rsi -> n
	iii) rax -> result
	iv) rdx -> mask
B. What are the initial values of result and mask?
	i) 0 -> result
	ii) 3 -> mask
C. What is the test condition for mask?
	mask != 0
D. How does mask get updated?
	mask << n
E. How does result get updated?
	|= (mask & x)
F. Fill in all the missing parts of the C code, by providing the entire contents of the 1 , 2 , etc blanks.
	1. 0
	2. 3
	3. != 0
	4. mask << n
	5. != (mask & x)

3)
A. &(A[i][j][k]) = x_a + L(i*S*T + j*T + k)
B.
Answers:
R = 4
s = 10
T = 9

Using the formula from A as a template, we can come to the correct answer
via the following reasoning:

rdi intially holds i
rsi, j
rdx, k
rcx, *dest

In line 4 we get the term: 9j -> r8
In line 5 we get the term: 90i -> rax
In line 6 we add the terms in r8 and rax: 90i + 9j -> rax
In line 7 we add the terms in rdx and rax: 90i + 9j + k -> rax
In line 8 we use leaq to yield the formula: A + 4*(90i + 9j + k) -> edx
	Where A is the base address of the array
This is the address of the element A[i][j][k]
We know this because it is loaded into the memory (intially) referenced by rcx in line 10
In line 13 the compiler tells us the size of the array A (in bytes) is 1440
Knowing the size of a long is 4 bytes
The number of elements in the array is then 1440 / 4 = 360

Therefore:
Knowing the formula calculated by the assembley code
Knowing the general formula given in part A
Knowing the amount of elements in the array A (360)
We get the following equations

S*T = 90
T = 9
R*S*T = 360

Which yield the results

R = 4
S = 10
T = 9

Because math

